@namespace(uri="Y3877930", prefix="")
package Y3877930;

class System {
	attr String name;
	val EventStream[*] eventStreams;
	val Microservice[*] microservices;
}


class Microservice {
	attr String name;
	attr Long port;
	attr String ~package;
	val Entity[*] entities;
	val Consumer[*] consumers;
	val Producer[*] producers;
	val Controller[*] controllers;
	val DTO[*] dtos;
	val Repository[*] repositories;
}

class Controller{
	attr String name;
	attr String path;
	val Endpoint[*] endpoints;
}

class Endpoint{
	attr String name;
	attr String path;
	attr EndpointType type;
	val Attribute[*] requestParams;
	val Attribute responseBody;
}

class Entity {
	attr String name;
	val EntityAttribute[*] attributes;
	ref DTO dto;
}

class DTO {
	attr String name;
	val Attribute[*] attributes;
}

class Repository {
	attr String name;
	ref Entity entity;
}

class Attribute{
	attr String type;
	attr String name;
}
class EntityAttribute extends Attribute{
	attr RelationshipType relationship = "None";
	attr Boolean JsonIgnore = false;
    attr Boolean GeneratedValue = false;
	attr String mappedBy = "";
	attr FetchType fetchtype = "LAZY";
	attr Boolean ~unique = false;
    attr Boolean nullable = true;
    attr Boolean insertable = true;
    attr Boolean updatable = true;
	attr String columnDefinition = "";
	
}
class Consumer{
	attr String name;
	attr Boolean isStream = false;
	ref EventStream[*] eventStreams;
}

class Producer{
	attr String name;
	ref EventStream[*] eventStreams;
}

class EventStream{
	attr String name;
	val KeyType key;
	val ValueType value;
}

class KeyType extends EventType{}
class ValueType extends EventType{}

abstract class EventType{
	attr String name;
	attr String type;
}

enum EndpointType {
 GET;
 PUT;
 POST;
 DELETE;
}

enum FetchType {
 LAZY;
 EAGER;
}


enum RelationshipType {
 None;
 ManyToMany;
 OneToMany;
 ManyToOne;
}