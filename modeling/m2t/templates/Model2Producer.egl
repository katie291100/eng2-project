package [%=package%].events;

import io.micronaut.configuration.kafka.annotation.KafkaClient;
import io.micronaut.configuration.kafka.annotation.KafkaKey;
import io.micronaut.configuration.kafka.annotation.Topic;
[% if (p.eContainer().entities.size() > 0) {%]
import [%=package%].domain.*;
[%}%]

@KafkaClient
public interface [%=p.name.firstToUpperCase()%] {

    [% for (e in p.eventStreams) {%]
    [%
    var split = e.name.split('-');
    var funcName = split.first().firstToLowerCase();
    split.removeAt(0);
    for (w in split){
        funcName = funcName.concat(w.firstToUpperCase());
    }
    %]
    @Topic("[%=e.name%]")
    void [%=funcName%](@KafkaKey [%=e.key.getType()%] [%=e.key.name%], [%=e.value.getType()%] [%=e.value.name%]);
    [%}%]
}

[%
operation ValueType getType(){
    return self.type.replace("\\[", "\\<").replace("\\(", "\\<").replace("\\)", "\\>").replace("\\]", "\\>").firstToUpperCase();
}
operation KeyType getType(){
    return self.type.replace("\\[", "\\<").replace("\\(", "\\<").replace("\\)", "\\>").replace("\\]", "\\>").firstToUpperCase();
}
%]