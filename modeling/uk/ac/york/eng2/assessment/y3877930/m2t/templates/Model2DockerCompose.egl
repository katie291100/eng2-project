# This file has been automatically generated
[%
  var volumes : List<String>;
  volumes=new List;
  var topics : Set<String>;
  for (m in s.microservices){
      for (p in m.producers){
          for (e in p.eventStreams){
              topics.add(e.name);
          }
      }
      for (p in m.consumers){
          for (e in p.eventStreams){
              topics.add(e.name);
          }
      }
  }
%]
services:
    kafka-0:
        image: docker.io/bitnami/kafka:3.6.1
        restart: unless-stopped
        environment:
          # KRaft settings
          - KAFKA_CFG_NODE_ID=0
          - KAFKA_CFG_PROCESS_ROLES=controller,broker
          - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
          - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
          # Listeners
          - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
          - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
          - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
          - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
          - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
          # Default topic settings
          - KAFKA_CFG_NUM_PARTITIONS=6
          - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
          # Disable auto-creating topics
          - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
          # JMX port for metrics
          - JMX_PORT=9997
          - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-0 -Dcom.sun.management.jmxremote.rmi.port=9997
        volumes:
          - kafka_0_data:/bitnami/kafka
        healthcheck:
          test: [ 'CMD-SHELL', 'unset KAFKA_JMX_OPTS; export JMX_PORT=9999; kafka-topics.sh --bootstrap-server localhost:9092 --topic hc --create --if-not-exists && kafka-topics.sh --bootstrap-server localhost:9092 --topic hc --describe' ]
          timeout: 10s
          retries: 3
    kafka-1:
        image: docker.io/bitnami/kafka:3.6.1
        restart: unless-stopped
        environment:
          # KRaft settings
          - KAFKA_CFG_NODE_ID=1
          - KAFKA_CFG_PROCESS_ROLES=controller,broker
          - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
          - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
          # Listeners
          - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
          - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
          - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
          - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
          - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
          # Default topic settings
          - KAFKA_CFG_NUM_PARTITIONS=6
          - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
          # Disable auto-creating topics
          - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
          # JMX port for metrics
          - JMX_PORT=9997
          - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-1 -Dcom.sun.management.jmxremote.rmi.port=9997
        volumes:
          - kafka_1_data:/bitnami/kafka
    
    kafka-2:
        image: docker.io/bitnami/kafka:3.6.1
        restart: unless-stopped
        environment:
          # KRaft settings
          - KAFKA_CFG_NODE_ID=2
          - KAFKA_CFG_PROCESS_ROLES=controller,broker
          - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
          - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
          # Listeners
          - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
          - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
          - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
          - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
          - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
          # Default topic settings
          - KAFKA_CFG_NUM_PARTITIONS=6
          - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
          # Disable auto-creating topics
          - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
          # JMX port for metrics
          - JMX_PORT=9997
          - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-2 -Dcom.sun.management.jmxremote.rmi.port=9997
        volumes:
          - kafka_2_data:/bitnami/kafka
    init-kafka:
        image: docker.io/bitnami/kafka:3.6.1
        depends_on:
          - kafka-0
        entrypoint: [ '/bin/sh', '-c' ]
        command: |
          "
          # blocks until kafka is reachable
          kafka-topics.sh --bootstrap-server kafka-0:9092 --list
    
          echo -e 'Creating kafka topics'
          [% for (t in topics){%]
          kafka-topics.sh --bootstrap-server kafka-0:9092 --create --if-not-exists --topic [%=t%] --replication-factor 3 --partitions 3
          [%}%]
          echo -e 'Successfully created the following topics:'
          kafka-topics.sh --bootstrap-server kafka-0:9092 --list
          "
    [%  
    var i : Integer;
    i = 0;
     %]
    [% for (m in s.microservices) {%]
    [%=m.name%]:
        image: [%=m.name%]:latest
        restart: unless-stopped
        ports:
            - [%=8080+i%]:8080
        [%i = i+1;%]
        environment:
          KAFKA_BOOTSTRAP_SERVERS: kafka-0:9092,kafka-1:9092,kafka-2:9092
          MICRONAUT_ENVIRONMENTS: prod
        [%if (m.repositories.size() > 0){%]
          DB_HOST: db-[%=m.name%]
        healthcheck:
          # https://github.com/docker-library/healthcheck/blob/master/mysql/Dockerfile.mariadb
          test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
          timeout: 10s
          retries: 3
        depends_on:
          db-[%=m.name%]:
            condition:
                service_healthy
    db-[%=m.name%]:
        image: mariadb:11
        restart: unless-stopped
        volumes:
          - mariadb_data-[%=m.name%]:/var/lib/mysql
              [%volumes.add("mariadb_data-"+m.name);%]
        healthcheck:
          # https://github.com/docker-library/healthcheck/blob/master/mysql/Dockerfile.mariadb
          test: [ 'CMD', 'healthcheck.sh', '--su=mysql', '--connect', '--innodb_initialized' ]
          timeout: 10s
          retries: 3
        [%}%]  
  [%}%]
     
    
volumes:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data:
  [%for (v in volumes) {%]
  [%=v%]:
  [%}%]
    
