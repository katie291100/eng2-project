
pre {

}

rule Model2Dto transform d : DTO {
	template : "templates/Model2Dto.egl"
	target : './'+d.eContainer().name + "/src-gen/main/java/" + d.eContainer().getPackageFiles() + "/dto/"+ d.name.firstToUpperCase()+".java"
	parameters: Map{"package"= d.eContainer().package}
}

rule Model2Entity transform e : Entity {
    template : "templates/Model2Entity.egl"
    target : e.eContainer().name + "/src-gen/main/java/" + e.eContainer().getPackageFiles() + "/domain/"+ e.name.firstToUpperCase()+".java"
    parameters: Map{"package"= e.eContainer().package}
}

//Generates controller interface
rule Model2Controller
	transform c : Controller {
		
	template : "templates/Model2Controller.egl"

	target : c.eContainer().name + "/src-gen/main/java/" + c.eContainer().getPackageFiles() + "/controllers/"+ c.name.firstToUpperCase()+"Interface.java"
    parameters: Map{"package"= c.eContainer().package}

}
//
////Generates controller interface
//rule Model2ControllerAbstract
//	transform c : Controller {
//
//	template : "templates/Model2ControllerAbstract.egl"
//
//	target : c.eContainer().name + "/src-gen/main/java/" + c.eContainer().getPackageFiles() + "/controllers/"+ c.name.firstToUpperCase()+"Abstract.java"
//    parameters: Map{"package"= c.eContainer().package}
//
//}

//Generates producer
rule Model2Producer
    transform p : Producer {
        
    template : "templates/Model2Producer.egl"

    target : p.eContainer().name + "/src-gen/main/java/" + p.eContainer().getPackageFiles() + "/events/"+ p.name.firstToUpperCase()+".java"
    parameters: Map{"package"= p.eContainer().package}

}

//Generates producer
rule Model2Repository
    transform r : Repository {
        
    template : "templates/Model2Repository.egl"

    target : r.eContainer().name + "/src-gen/main/java/" + r.eContainer().getPackageFiles() + "/repositories/"+ r.name.firstToUpperCase()+".java"
    parameters: Map{"package"= r.eContainer().package}

}



rule Model2DockerCompose
	transform s : System {
		
	template : "templates/Model2DockerCompose.egl"

	target : "docker-compose-gen.yml"

}

rule Model2DockerComposeSecrets
    transform s : System {
        
    template : "templates/Model2DockerSecrets.egl"

    target : "docker-compose-secrets.yml"

}

operation Microservice getPackageFiles(){
    return self.package.replace("\\.", "/");
}