<?nsuri Y3877930?>
<?render-egx ../metamodel/Y3877930.egx?>
<system name="Social Media">
	<eventStreams>
	    <eventStream name="new-video">
        <event>
		    <event>
		        <key name="videoId" type="Long"/>
		        <value name="video" type="Video"/>
	        </event>
        </event>
	    </eventStream>
	    <eventStream name="like-video">
        <event>
            <event>
		        <key name="userId" type="Long"/>
		        <value name="videoId" type="Video"/>
	        </event>
            </event>
	    </eventStream>
	    <eventStream name="dislike-video">
        <event>
            <event>
	            <key name="userId" type="Long"/>
	            <value name="videoId" type="Video"/>
            </event>
            </event>
	    </eventStream>
	    <eventStream name="new-hashtag">
        <event>
            <event>
		        <key name="hashtagId" type="Long"/>
		        <value name="hashtag" type="Hashtag"/>
	       </event>
            </event>
	    </eventStream>
	    <eventStream name="new-user">
        <event>
            <event>
		        <key name="userId" type="Long"/>
		        <value name="user" type="User"/>
	                   </event>
            </event>
	    </eventStream>
	    <eventStream name="watch-video">
	       <event>
            <event>
	            <key name="userId" type="Long"/>
	            <value name="videoId" type="Video"/>
	                   </event>
            </event>
	    </eventStream>
	    <eventStream name="subscribe-hashtag">
        <event>
            <event>
		        <key name="userId" type="Long"/>
		        <value name="hashtag" type="Hashtag"/>
	                   </event>
            </event>
	    </eventStream>
   		<eventStream name="unsubscribe-hashtag">
	     <event>
            <event>
	            <key name="userId" type="Long"/>
	            <value name="hashtag" type="Hashtag"/>
	       </event>
            </event>
        </eventStream>
    </eventStreams>
    <cli name="" microservicesAccessed = "video-microservice, trending-hashtag-microservice, subscription-microservice"/>
    <microservice name="video-microservice" port="8080" package="uk.ac.york.eng2.videos">
        <entity name="Video" dto="VideoDTO">
            <entityAttribute name="id" type="Long" generatedValue="True"/>
        	<entityAttribute name="title" type="String" nullable="false"/>
        	<entityAttribute name="postedBy" type="User" relationship="ManyToOne" optional="false" fetchType="EAGER"/>
          	<entityAttribute name="likes" type="Long"/>
            <entityAttribute name="dislikes" type="Long"/>
  			<entityAttribute name="hashtags" type="Set[Hashtag]" fetchType="EAGER" relationship="ManyToMany"/>
  			<entityAttribute name="watchers" type="Set[User]" JsonIgnore="true" relationship="ManyToMany" mappedBy = "watchedVideos"/>
        </entity>       
        <entity name="User" dto="UserDTO">
          	<entityAttribute name="id" type="Long" generatedValue="True"/>
            <entityAttribute name="name" type="String" nullable="false"/>
            <entityAttribute name="watchedVideos" type="Set(Video)" JsonIgnore="true" relationship="ManyToMany" />
            <entityAttribute name="postedVideos" type="Set(Video)" relationship="OneToMany" mappedBy = "postedBy" fetch = "EAGER" JsonIgnore="True"/>
        </entity>
        <entity name="Hashtag" dto="HashtagDTO">
          	<entityAttribute name="id" type="Long" generatedValue="True"/>
            <entityAttribute name="name" type="String" nullable="false"/>
            <entityAttribute name="videos" type="Set(Video)" relationship="ManyToMany" mappedBy = "hashtags" fetch = "EAGER" JsonIgnore = "true"/>
        </entity>
        <repository name="VideosRepository" entity="Video"/>
       	<repository name="UsersRepository" entity="User"/>
        <repository name="HashtagsRepository" entity="Hashtag"/>
        
        <dto name="VideoDTO">        
        	<attribute name="title" type="String"/>
        	<attribute name="postedBy" type="Long"/>
        	<attribute name="hashtags" type="Set[HashtagDTO]"/>
        	
        </dto>
        <dto name="UserDTO">        
        	<attribute name="name" type="String"/>
        </dto>
        <dto name="HashtagDTO">        
        	<attribute name="name" type="String"/>
        </dto>
        <producer name="videoProducer" eventStreams="new-video, like-video, dislike-video"/>
        <producer name="userProducer" eventStreams="new-user, watch-video"/>
        <producer name="hashtagProducer" eventStreams="new-hashtag"/>

        <controller name="videoControllers" path="/videos">
            <endpoint name="listVideos" type="GET" path="/">
            	<responseBody>
            	   <attribute name="videos" type="List[Video]"/>
            	</responseBody>
             </endpoint>
            <endpoint name="listVideosByHashtag" type="GET" path="hashtag/{hashtag}">
            	<responseBody>
            	   <attribute name="videos" type="Set[Video]"/>
            	</responseBody>
            	<requestParams>
            	   <attribute name="hashtag" type="String" />
            	</requestParams>
             </endpoint>
            <endpoint name="addVideo" type="POST" path="/">
                <requestParams>
            	   <attribute name="videoDTO" type="VideoDTO"/>
            	</requestParams>
                <responseBody>
            	   <attribute name="HttpResponse" type="HttpResponse[Void]"/>
            	</responseBody>
            </endpoint>
            <endpoint name="getVideo" type="GET" path="/{videoId}">
                <requestParams>
            	   <attribute name="videoId" type="Long"/>
            	</requestParams>
                <responseBody>
            	   <attribute name="video" type="Video"/>
            	</responseBody>
            </endpoint>
            <endpoint name="likeVideo" type="PUT" path="/{videoId}/likeVideo/{userId}">
                <requestParams>
            	   <attribute name="videoId" type="Long"/>
            	   <attribute name="userId" type="Long"/>
            	</requestParams>
                <responseBody>
            	   <attribute name="HttpResponse" type="HttpResponse[Void]"/>
            	</responseBody>
            </endpoint>
            <endpoint name="dislikeVideo" type="PUT" path="/{videoId}/dislikeVideo/{userId}">
                  <requestParams>
            	   <attribute name="videoId" type="Long"/>
            	   <attribute name="userId" type="Long"/>
            	</requestParams>
                <responseBody>
            	   <attribute name="HttpResponse" type="HttpResponse[Void]"/>
            	</responseBody>
            </endpoint>
        </controller>
        <controller name="userControllers" path="/user">
      		 <endpoint name="listUsers" type="GET" path="/">
            	<responseBody>
            	   <attribute name="users" type="Set[User]"/>
            	</responseBody>
             </endpoint>
            <endpoint name="addUser" type="POST" path="/">
                <requestParams>
            	   <attribute name="userDTO" type="UserDTO"/>
            	</requestParams>
                <responseBody>
            	   <attribute name="HttpResponse" type="HttpResponse[Void]"/>
            	</responseBody>
            </endpoint>
            <endpoint name="watchVideo" type="PUT" path="/{userId}/watchedVideo/{videoId}">
                <requestParams>
            	   <attribute name="userId" type="Long"/>
                   <attribute name="videoId" type="Long"/>
            	</requestParams>
                <responseBody>
            	   <attribute name="HttpResponse" type="HttpResponse[Void]" />
            	</responseBody>
            </endpoint>
            <endpoint name="getUser" type="GET" path="/{userId}">
                <requestParams>
            	   <attribute name="userId" type="Long"/>
            	</requestParams>
                <responseBody>
            	   <attribute name="user" type="User"/>
            	</responseBody>
            </endpoint>
            <endpoint name="getWatchedByUser" type="GET" path="/{userId}/watchedVideos">
                <requestParams>
            	   <attribute name="userId" type="Long"/>
            	</requestParams>
                <responseBody>
            	   <attribute name="videos" type="Set[Video]"/>
            	</responseBody>
            </endpoint>
            <endpoint name="getPostedByUser" type="GET" path="/{userId}/postedVideos">
                <requestParams>
            	   <attribute name="userId" type="Long"/>
            	</requestParams>
                <responseBody>
            	   <attribute name="videos" type="Set(Video)"/>
            	</responseBody>
            </endpoint>
        </controller>

        <controller name="hashtagControllers" path="/hashtag">
        	 <endpoint name="listHashtags" type="GET" path="/" >
            	<responseBody>
            	   <attribute name="hashtags" type="Set[Hashtag]"/>
            	</responseBody>
             </endpoint>
             <endpoint name="getHashtag" type="GET"  path="/{hashtagId}">
                <requestParams>
            	   <attribute name="hashtagId" type="Long"/>
            	</requestParams>
                <responseBody>
            	   <attribute name="hashtag" type="Hashtag"/>
            	</responseBody>
            </endpoint>
            <endpoint name="addHashtag" type="POST" path="/">
                <requestParams>
            	   <attribute name="hashtagDTO" type="HashtagDTO"/>
            	</requestParams>
                <responseBody>
            	   <attribute name="HttpResponse" type="HttpResponse[Void]"/>
            	</responseBody>
            </endpoint>
		</controller>
		<controller name="healthcheckControllers" path="/health">
		<endpoint name="health" type="GET" path="/">
                <responseBody>
            	   <attribute name="HttpResponse" type="HttpResponse[Void]"/>
            	</responseBody>
            </endpoint>
		</controller>
    </microservice>
    <microservice name="trending-hashtag-microservice" port="8081" package="uk.ac.york.eng2.trendingHashtags">
        <entity name="Hashtag" dto="HashtagDTO">
            <entityAttribute name="id" type="Long"/>
            <entityAttribute name="name" type="String" nullable="false"/>
            <entityAttribute name="videos" type="Set(Video)" relationship="ManyToMany" mappedBy = "hashtags"/>

        </entity>
        <entity name="Video" dto="VideoDTO">
            <entityAttribute name="id" type="Long"/>
            <entityAttribute name="title" type="String" nullable="false"/>
            <entityAttribute name="likes" type="Long"/>
            <entityAttribute name="dislikes" type="Long"/>
            <entityAttribute name="hashtags" type="Set[Hashtag]" fetchType="EAGER" relationship="ManyToMany"/>
        </entity> 
        
        <repository name="HashtagsRepository" entity="Hashtag"/>
    
        <consumer name="hashtagConsumer" eventStreams="new-hashtag"/>
        <consumer name="trendingStreams" eventStreams="like-video" isStream = "True"/>

        <controller name="trendingController" path="/trendingHashtags">
            <endpoint name="listAll" type="GET"  path="/">
                <responseBody>
            	   <attribute name="videos" type="List(Long)"/>
            	</responseBody>
            </endpoint> 
        </controller>
       <controller name="healthcheckControllers"  path="/health">
			<endpoint name="health" type="GET"  path="/">
                <responseBody>
            	   <attribute name="HttpResponse" type="HttpResponse[Void]"/>
            	</responseBody>
            </endpoint>
		</controller>
        
        <dto name="VideoDTO">        
            <attribute name="title" type="String"/>
            <attribute name="postedBy" type="Long"/>
            <attribute name="hashtags" type="Set[HashtagDTO]"/>
            
        </dto>
        <dto name="HashtagDTO">        
            <attribute name="name" type="String"/>
        </dto>
    </microservice>
    <microservice name="subscription-microservice" port="8082" package="uk.ac.york.eng2.subscription">
        <entity name="Video" dto="VideoDTO">
            <entityAttribute name="id" type="Long"/>
            <entityAttribute name="title" type="String" nullable="false"/>
            <entityAttribute name="postedBy" type="User" relationship="ManyToOne" optional="false"/>
            <entityAttribute name="hashtags" type="Set[Hashtag]" fetchType="EAGER" relationship="ManyToMany"/>
            <entityAttribute name="watchers" type="Set[User]" JsonIgnore="true" relationship="ManyToMany" mappedBy = "watchedVideos"/>
        </entity>       
        <entity name="User" dto="UserDTO">
            <entityAttribute name="id" type="Long"/>
            <entityAttribute name="name" type="String" nullable="false"/>
            <entityAttribute name="watchedVideos" type="Set(Video)" JsonIgnore="true" relationship="ManyToMany" />
            <entityAttribute name="subscriptions" type="Set(Hashtag)" JsonIgnore="true" relationship="ManyToMany" fetch="EAGER" mappedBy="subscribedToBy" />
        </entity>
        <entity name="Hashtag" dto="HashtagDTO">
            <entityAttribute name="id" type="Long"/>
            <entityAttribute name="name" type="String" nullable="false"/>
            <entityAttribute name="videos" type="Set(Video)" relationship="ManyToMany" mappedBy = "hashtags" fetch = "EAGER"/>
            <entityAttribute name="subscribedToBy" type="Set(User)" JsonIgnore="true" relationship="ManyToMany" />
        </entity>
        <repository name="HashtagsRepository" entity="Hashtag"/>
        <repository name="UsersRepository" entity="User"/>
        <repository name="VideosRepository" entity="Video"/>

        <dto name="VideoDTO">        
            <attribute name="title" type="String"/>
            <attribute name="postedBy" type="Long"/>
            <attribute name="hashtags" type="Set[HashtagDTO]"/>

        </dto>
        <dto name="UserDTO">        
            <attribute name="name" type="String"/>
        </dto>
        <dto name="HashtagDTO">        
            <attribute name="name" type="String"/>
        </dto>
        <consumer name="subscriptionConsumer" eventStreams="subscribe-hashtag, unsubscribe-hashtag"/>
        
        <consumer name="videoStream" eventStreams="new-video" isStream = "True"/>
        <producer name="subscriptionProducer" eventStreams="subscribe-hashtag, unsubscribe-hashtag"/>
       <controller name="healthcheckControllers" path="health">
			<endpoint name="health" type="GET" path="/">
                <responseBody>
            	   <attribute name="HttpResponse" type="HttpResponse[Void]"/>
            	</responseBody>
            </endpoint>
		</controller>

        <controller name="subscriptionController" path="/subscription">
            <endpoint name="listAllSubscriptions" type="GET" path="/">
                <responseBody>
            	   <attribute name="videos" type="Set(Video)"/>
            	</responseBody>
            </endpoint> 
            <endpoint name="subscribe" type="PUT" path="/{hashtagId}/{userId}">
                <requestParams>
                    <attribute name="hashtagId" type="Long"/>
                    <attribute name="userId" type="Long"/>
                </requestParams>
                <responseBody>
                   <attribute name="HttpResponse" type="HttpResponse(Void)"/>
                </responseBody>
            </endpoint> 
            <endpoint name="unsubscribe" type="DELETE" path="/{hashtagId}/{userId}">
                <requestParams>
                    <attribute name="hashtagId" type="Long"/>
                    <attribute name="userId" type="Long"/>
                </requestParams>
                <responseBody>
                   <attribute name="HttpResponse" type="HttpResponse(Void)"/>
                </responseBody>
            </endpoint> 
        </controller>

    </microservice>
</system>